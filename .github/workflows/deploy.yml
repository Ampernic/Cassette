name: Deploy

on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:

jobs:
  pr-deploy:
    name: Pull Request to deploy branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Config git
        run: |
          git config --global user.name "auto-deployer"
          git config --global user.email "rirusha@noreply.github.com"

      - name: Checkout branch
        run: git checkout ${{ env.DEVEL_SLICE_BRANCH_NAME }}
      
      - name: Merge changes
        run: |
          git merge origin/dev-* --no-edit
          git push origin ${{ env.DEVEL_SLICE_BRANCH_NAME }}

  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-nigthly
      options: --priveleged
    
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      fail-fast: false
      max-parallel: 1
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup GPG
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build and install deps
        run: |
          flatpak-builder build --user --install-deps-from=${{ env.REPO_NAME }} --gpg-sign=${{ steps.gpg.outputs.fingerprint }} --disable-rofiles-fuse --disable-updates --force-clean --repo=repo --default-branch=master ${{ env.MANIFEST_PATH }}
          flatpak build-bundle --arch=${{ matrix.arch }} --gpg-sign=${{ steps.gpg.outputs.fingerprint }} repo ${{ env.DEVEL_APP_ID }}.flatpak --runtime-repo=${{ env.REPO_URL }} ${{ env.DEVEL_APP_ID }} master

          flatpak build-update-repo --gpg-sign=${{ steps.gpg.outputs.fingerprint }} --generate-static-deltas --prune repo/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEVEL_APP_ID }}-${{ matrix.arch }}  # имя вашего артефакта
          path: repo/${{ env.DEVEL_APP_ID }}.flatpak  # путь к артефакту, который вы хотите сохранить

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
